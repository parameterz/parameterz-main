#!/usr/bin/env python

from __future__ import division
import math
import config
from patient import Patient

required = ['ht', 'wt', 'gender']
name = 'short name'
description = '''
	This calculator will return ...
	'''
citation = {
	'title': ''' ''',
	'authors': ' ',
	'journal': '',
	'url': ''
}


class Base(object):
    ''' This is the base class for the Zurich model.
        The form of these equations is:
            y = aX^b
            where X = BSA

        access like so:
        for k,v in sorted(sites.items()):
            print '%s' % k.upper()
            print 'Mean: %.2f' % v.mean(pt)
            print 'Range: %.2f - %.2f' % (v.lln(pt), v.uln(pt))
            print '\n' *2
        '''
    def __init__(self, d):
        self.bsaMethod = 'Mosteller'
        self.site = d['site']
        self.boys = d['boys']
        self.girls = d['girls']

    def _getGender(self, pt):
        if pt.gender == 'm':
            return self.boys
        else:
            return self.girls
        
    def mean(self, pt):
        gender = self._getGender(pt)
        return gender['a'] * math.pow( pt.bsa(self.bsaMethod), gender['b'] )

    def zscore(self, pt):
        gender = self._getGender(pt)
        try:
            score = getattr(pt, self.site)
            z = math.log10(score / self.mean(pt)) / gender['sd']
            return z
        except:
            return None #property of object 'pt' does not exist

    def uln(self, pt):
        gender = self._getGender(pt)
        uln = math.log10(self.mean(pt)) + config.LIMIT * gender['sd']
        return math.pow(10, uln)

    def lln(self, pt):
        gender = self._getGender(pt)
        lln = math.log10(self.mean(pt)) - config.LIMIT * gender['sd']
        return math.pow(10, lln)

# 
# set up the individual sites, using the published data 
# The only difference between 'boys' and 'girls' is the 'a' term...
#

lvedv = Base( {
	'site': 'lvedv',
	'boys': {'a': 77.5, 'b': 1.380, 'sd': 0.0426},
	'girls': {'a': 67.8, 'b': 1.380, 'sd': 0.0426}
	} )

lvesv = Base( {
	'site': 'lvesv',
	'boys': {'a': 29.7, 'b': 1.370, 'sd': 0.0647},
	'girls': {'a': 26.1, 'b': 1.370, 'sd': 0.0647}
	} )

lvsv = Base( {
	'site': 'lvsv',
	'boys': {'a': 47.4, 'b': 1.394, 'sd': 0.0500},
	'girls': {'a': 41.7, 'b': 1.394, 'sd': 0.0500}
	} )

lvco = Base( {
	'site': 'lvco',
	'boys': {'a': 3890, 'b': 1.062, 'sd': 0.0727},
	'girls': {'a': 3622, 'b': 1.062, 'sd': 0.0727}
	} )

lvm = Base( {
	'site': 'lvm',
	'boys': {'a': 53, 'b': 1.304, 'sd': 0.0475},
	'girls': {'a': 45.2, 'b': 1.304, 'sd': 0.0475}
	} )

paps = Base( {
	'site': 'paps',
	'boys': {'a': 1.9, 'b': 1.451, 'sd': 0.0976},
	'girls': {'a': 1.6, 'b': 1.451, 'sd': 0.0976}
	} )

rvedv = Base( {
	'site': 'rvedv',
	'boys': {'a': 83.8, 'b': 1.469, 'sd': 0.0499},
	'girls': {'a': 72.7, 'b': 1.469, 'sd': 0.0499}
	} )

rvesv = Base( {
	'site': 'rvesv',
	'boys': {'a': 35.3, 'b': 1.559, 'sd': 0.0737},
	'girls': {'a': 30.2, 'b': 1.559, 'sd': 0.0737}
	} )

rvsv = Base( {
	'site': 'rvsv',
	'boys': {'a': 48.2, 'b': 1.407, 'sd': 0.0524},
	'girls': {'a': 42.1, 'b': 1.407, 'sd': 0.0524}
	} )

rvco = Base( {
	'site': 'rvco',
	'boys': {'a': 3947, 'b': 1.076, 'sd': 0.0783},
	'girls': {'a': 3658, 'b': 1.076, 'sd': 0.0783}
	} )

rvm = Base( {
	'site': 'rvm',
	'boys': {'a': 16.7, 'b': 1.331, 'sd': 0.0605},
	'girls': {'a': 14.9, 'b': 1.331, 'sd': 0.0605}
	} )

sites = [
    'lvedv',
    'lvesv',
    'lvsv',
    'lvco',
    'lvm',
    'paps',
    'rvedv',
    'rvesv',
    'rvsv',
    'rvco',
    'rvm'
    ]

inputs = [
	{'name':'lvedv',
	 'label': 'LV End Diastolic Volume (ml)',
	 'title': 'LVEDV (ml)'
	 },
	{'name': 'lvesv',
	 'label': 'LV End Systolic Volume (ml)',
	 'title': 'LVESV (ml)'
	 },
	{'name': 'lvsv',
	 'label': 'LV Stroke Volume (ml)',
	 'title': 'LVSV (ml)'
	 },
	{'name': 'lvco',
	 'label': 'LV Cardiac Output (ml/min)',
	 'title': 'LVCO (ml/min)'
	 },
	{'name': 'lvm',
	 'label': 'LV Mass (g)',
	 'title': 'LVM (g)'
	 },
	{'name': 'paps',
	 'label': 'Papillary Muscles (g)',
	 'title': 'PAP MUSC (g)'
	 },
	{'name':'rvedv',
	 'label': 'RV End Diastolic Volume (ml)',
	 'title': 'RVEDV (ml)'
	 },
	{'name': 'rvesv',
	 'label': 'RV End Systolic Volume (ml)',
	 'title': 'RVESV (ml)'
	 },
	{'name': 'rvsv',
	 'label': 'RV Stroke Volume (ml)',
	 'title': 'RVSV (ml)'
	 },
	{'name': 'rvco',
	 'label': 'RV Cardiac Output (ml/min)',
	 'title': 'RVCO (ml/min)'
	 },
	{'name': 'rvm',
	 'label': 'RV Mass (g)',
	 'title': 'RVM (g)'
	 },	
]

