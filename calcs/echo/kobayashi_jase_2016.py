#!/usr/bin/env python
# coding=utf-8

from __future__ import division
import math
import logging


required = ['bsa', 'gender']
bsaMethod = 'Haycock'
constraints = {'age': [0, 19], 'BSA': [0.15, 2.29]}

name = 'Kobayashi et al., JASE 2016'

description = '''Coronary artery z-scores adjusted for gender and BSA using the LMS method. Data are from a multicenter,
prospective, observational study performed in Japan with over 3,800 patients.'''
detail = '''Gender-specific, BSA-adjusted z-scores of the proximal coronary arteries (LMCA, LAD, LCX, RCA).
Data is from a prospective multicenter study in Japan, with 3,851 patients.

> A Microsoft Excel-based Z-score calculator was also created, which is freely available online
([http://raise.umin.jp/zsp/calculator/](http://raise.umin.jp/zsp/calculator/)).

'''
citation = {
    'title': 'A New Z-Score Curve of the Coronary Arterial Internal Diameter Using the Lambda-Mu-Sigma Method in a Pediatric Population.',
    'authors': 'Kobayashi T, Fuse S, Sakamoto N, Mikami M, Ogawa S, Hamaoka K, Arakaki Y, Nakamura T, Nagasawa H, Kato T, Jibiki T, Iwashima S, Yamakawa M, Ohkubo T, Shimoyama S, Aso K, Sato S, Saji T; Z Score Project Investigators.',
    'journal': 'J Am Soc Echocardiogr. 2016 Jun 7. pii:S0894-7317(16)30001-3.',
    'url': 'http://www.ncbi.nlm.nih.gov/pubmed/27288089'
}


class Base(object):
    ''' This is the base class for the Kobayashi model.
        These are all LMS lookups.
        '''

    def __init__(self, data, pt, limit):
        self.source = name
        self.citation = citation
        self.refName = 'kobayashi_jase_2016'
        self.siteName = data['name']
        self.bsaMethod = bsaMethod
        self.bsa = pt.bsa(bsaMethod)
        self.gender = pt.gender
        self.lms = data[pt.gender]
        self.limit = limit
        self.score = float(getattr(pt, data['name']))
        # chart stuff
        self.chartData = True
        self.bsaData = [x * 0.1 for x in range(1, 21)]
        self.chartXAxisLabel = 'BSA'
        self.myData = ([[self.bsa, self.score]])  # plot data
        self.constraints = constraints

    def getIndex(self, bsa):

        if bsa < 0.15:
            bsa = 0.15
        if self.gender in ['f', 'F', 'female', 'Female', 'FEMALE' ] and bsa > 2.1:
            bsa = 2.1
        if bsa > 2.2:
            bsa = 2.2
        if bsa in bsaRange:
            return bsaRange.index(bsa)
        else:
            return None

    def getLMS(self, bsa):
        # first see if the index is found w/ getIndex()
        # if not, get the nearest value
        # min(myList, key=lambda x:abs(x-myNumber))
        # and interpolate

        if self.getIndex(bsa) is not None:

            return self.lms[self.getIndex(bsa)]

        else:
            nextBSA = next(x for x in bsaRange if x > bsa)
            hiIndex = bsaRange.index(nextBSA)
            loIndex = hiIndex - 1
            # figure out what the delta of the listed BSA vs pt BSA; for use in interpolating the LMS values
            minBSA = nextBSA - 0.05
            delta = bsa - minBSA  # delta above the lower listed BSA
            percent = delta / 0.05  # the percent above the lower listed BSA; '0.05' is the step between listed BSA's
            lo = self.lms[loIndex]
            hi = self.lms[hiIndex]
            l = (hi[0] - lo[0]) * percent + lo[0]
            m = (hi[1] - lo[1]) * percent + lo[1]
            s = (hi[2] - lo[2]) * percent + lo[2]

            return [l, m, s]

    def mean(self):
        # the 'M' in 'LMS'!
        return self.getLMS(self.bsa)[1]

    def zscore(self):
        lms = self.getLMS(self.bsa)
        l = lms[0]
        m = lms[1]
        s = lms[2]
        z = ((math.pow(self.score / m, l) - 1) / (l * s))
        return z

    def _zscore(self, bsa, score):
        #"private" method for returning chartable data
        lms = self.getLMS(bsa)
        l = lms[0]
        m = lms[1]
        s = lms[2]
        z = ((math.pow(score / m, l) - 1) / (l * s))
        return z


    def _uln(self, bsa):
        lms = self.getLMS(bsa)
        l = lms[0]
        m = lms[1]
        s = lms[2]
        # calculate the uln
        limit = self.limit * l * s
        limit += 1
        return math.pow(limit, (1 / l)) * m

    def _lln(self, bsa):
        lms = self.getLMS(bsa)
        l = lms[0]
        m = lms[1]
        s = lms[2]
        # calculate the uln
        limit = -self.limit * l * s
        limit += 1
        return math.pow(limit, (1 / l)) * m

    def uln(self):
        return self._uln(self.bsa)

    def lln(self):
        return self._lln(self.bsa)

    def chart_uln(self):
        return [[x, self._uln(x)] for x in self.bsaData]

    def chart_lln(self):
        return [[x, self._lln(x)] for x in self.bsaData]

    def chart_mean(self):
        return [[x, self.getLMS(x)[1]] for x in self.bsaData]

#
# set up the individual sites, using the published data
#

bsaRange = [i / 100 for i in range(15, 225, 5)]  # 0.15 to 2.20 by .05 steps

lmca = {'name': 'lmca',
        'm': [
            [0.336, 1.203, 0.151],
            [0.336, 1.304, 0.151],
            [0.336, 1.405, 0.151],
            [0.336, 1.507, 0.151],
            [0.336, 1.608, 0.151],
            [0.336, 1.709, 0.151],
            [0.336, 1.808, 0.151],
            [0.336, 1.904, 0.151],
            [0.336, 1.998, 0.151],
            [0.336, 2.089, 0.151],
            [0.336, 2.176, 0.151],
            [0.336, 2.259, 0.151],
            [0.336, 2.339, 0.151],
            [0.336, 2.414, 0.151],
            [0.336, 2.487, 0.151],
            [0.336, 2.557, 0.151],
            [0.336, 2.624, 0.151],
            [0.336, 2.69, 0.151],
            [0.336, 2.754, 0.151],
            [0.336, 2.816, 0.151],
            [0.336, 2.876, 0.151],
            [0.336, 2.934, 0.151],
            [0.336, 2.99, 0.151],
            [0.336, 3.046, 0.151],
            [0.336, 3.1, 0.151],
            [0.336, 3.154, 0.151],
            [0.336, 3.207, 0.151],
            [0.336, 3.26, 0.151],
            [0.336, 3.313, 0.151],
            [0.336, 3.366, 0.151],
            [0.336, 3.419, 0.151],
            [0.336, 3.471, 0.151],
            [0.336, 3.524, 0.151],
            [0.336, 3.576, 0.151],
            [0.336, 3.628, 0.151],
            [0.336, 3.681, 0.151],
            [0.336, 3.733, 0.151],
            [0.336, 3.785, 0.151],
            [0.336, 3.838, 0.151],
            [0.336, 3.89, 0.151],
            [0.336, 3.942, 0.151],
            [0.336, 3.995, 0.151]
        ],
        'f': [
            [0.363, 1.173, 0.176],
            [0.363, 1.265, 0.175],
            [0.363, 1.357, 0.173],
            [0.363, 1.45, 0.171],
            [0.363, 1.544, 0.169],
            [0.363, 1.638, 0.168],
            [0.363, 1.732, 0.166],
            [0.363, 1.824, 0.164],
            [0.363, 1.915, 0.163],
            [0.363, 2.002, 0.161],
            [0.363, 2.085, 0.159],
            [0.363, 2.164, 0.158],
            [0.363, 2.24, 0.156],
            [0.363, 2.311, 0.155],
            [0.363, 2.378, 0.153],
            [0.363, 2.441, 0.151],
            [0.363, 2.502, 0.15],
            [0.363, 2.559, 0.148],
            [0.363, 2.613, 0.147],
            [0.363, 2.666, 0.145],
            [0.363, 2.717, 0.144],
            [0.363, 2.767, 0.142],
            [0.363, 2.817, 0.141],
            [0.363, 2.867, 0.14],
            [0.363, 2.916, 0.138],
            [0.363, 2.966, 0.137],
            [0.363, 3.016, 0.135],
            [0.363, 3.065, 0.134],
            [0.363, 3.115, 0.133],
            [0.363, 3.164, 0.131],
            [0.363, 3.213, 0.13],
            [0.363, 3.262, 0.129],
            [0.363, 3.31, 0.127],
            [0.363, 3.358, 0.126],
            [0.363, 3.406, 0.125],
            [0.363, 3.454, 0.124],
            [0.363, 3.501, 0.122],
            [0.363, 3.549, 0.121],
            [0.363, 3.596, 0.12],
            [0.363, 3.643, 0.119]
        ]
        }

lad = {'name': 'lad',
       'm': [
        [-0.223, 0.943, 0.157],
        [-0.191, 1.035, 0.161],
        [-0.158, 1.127, 0.165],
        [-0.126, 1.218, 0.17],
        [-0.094, 1.308, 0.173],
        [-0.061, 1.395, 0.177],
        [-0.029, 1.479, 0.18],
        [0.004, 1.559, 0.182],
        [0.036, 1.637, 0.183],
        [0.068, 1.71, 0.184],
        [0.101, 1.78, 0.185],
        [0.133, 1.846, 0.185],
        [0.166, 1.909, 0.184],
        [0.198, 1.969, 0.183],
        [0.23, 2.028, 0.182],
        [0.263, 2.085, 0.18],
        [0.295, 2.142, 0.178],
        [0.328, 2.198, 0.176],
        [0.36, 2.254, 0.174],
        [0.392, 2.31, 0.172],
        [0.425, 2.366, 0.171],
        [0.457, 2.42, 0.169],
        [0.49, 2.475, 0.168],
        [0.522, 2.528, 0.167],
        [0.554, 2.581, 0.166],
        [0.587, 2.634, 0.165],
        [0.619, 2.687, 0.165],
        [0.652, 2.74, 0.164],
        [0.684, 2.793, 0.164],
        [0.716, 2.846, 0.163],
        [0.749, 2.899, 0.162],
        [0.781, 2.952, 0.162],
        [0.814, 3.005, 0.161],
        [0.846, 3.057, 0.16],
        [0.878, 3.11, 0.16],
        [0.911, 3.162, 0.159],
        [0.943, 3.215, 0.158],
        [0.976, 3.267, 0.157],
        [1.008, 3.319, 0.156],
        [1.04, 3.371, 0.155],
        [1.073, 3.424, 0.154],
        [1.105, 3.476, 0.153]
       ],
       'f': [
        [0.204, 0.931, 0.168], 
        [0.204, 1.019, 0.168], 
        [0.204, 1.106, 0.168], 
        [0.204, 1.193, 0.168], 
        [0.204, 1.279, 0.168], 
        [0.204, 1.363, 0.168], 
        [0.204, 1.445, 0.168], 
        [0.204, 1.523, 0.168], 
        [0.204, 1.597, 0.168], 
        [0.204, 1.667, 0.168], 
        [0.204, 1.733, 0.168], 
        [0.204, 1.795, 0.168], 
        [0.204, 1.855, 0.168], 
        [0.204, 1.911, 0.168], 
        [0.204, 1.965, 0.168], 
        [0.204, 2.016, 0.168], 
        [0.204, 2.065, 0.168], 
        [0.204, 2.111, 0.168], 
        [0.204, 2.156, 0.168], 
        [0.204, 2.2, 0.168], 
        [0.204, 2.244, 0.168], 
        [0.204, 2.287, 0.168], 
        [0.204, 2.33, 0.168], 
        [0.204, 2.373, 0.168], 
        [0.204, 2.417, 0.168], 
        [0.204, 2.462, 0.168], 
        [0.204, 2.508, 0.168], 
        [0.204, 2.554, 0.168], 
        [0.204, 2.601, 0.168], 
        [0.204, 2.647, 0.168], 
        [0.204, 2.694, 0.168], 
        [0.204, 2.74, 0.168], 
        [0.204, 2.786, 0.168], 
        [0.204, 2.832, 0.168], 
        [0.204, 2.879, 0.168], 
        [0.204, 2.925, 0.168], 
        [0.204, 2.971, 0.168], 
        [0.204, 3.017, 0.168], 
        [0.204, 3.063, 0.168], 
        [0.204, 3.109, 0.168]
       ]
       }

circ = {'name': 'circ',
        'm': [
        [-0.186, 0.825, 0.2], 
        [-0.163, 0.911, 0.201], 
        [-0.141, 0.998, 0.201], 
        [-0.118, 1.083, 0.201], 
        [-0.095, 1.166, 0.202], 
        [-0.073, 1.246, 0.202], 
        [-0.050, 1.323, 0.202], 
        [-0.027, 1.395, 0.203], 
        [-0.005, 1.464, 0.203], 
        [0.018, 1.529, 0.203], 
        [0.041, 1.59, 0.204], 
        [0.063, 1.648, 0.204], 
        [0.086, 1.702, 0.204], 
        [0.109, 1.754, 0.204], 
        [0.131, 1.804, 0.205], 
        [0.154, 1.852, 0.205], 
        [0.177, 1.9, 0.205], 
        [0.199, 1.947, 0.206], 
        [0.222, 1.993, 0.206], 
        [0.245, 2.04, 0.206], 
        [0.267, 2.086, 0.207], 
        [0.29, 2.132, 0.207], 
        [0.313, 2.177, 0.207], 
        [0.336, 2.222, 0.208], 
        [0.358, 2.267, 0.208], 
        [0.381, 2.311, 0.208], 
        [0.404, 2.356, 0.209], 
        [0.426, 2.401, 0.209], 
        [0.449, 2.446, 0.209], 
        [0.472, 2.491, 0.209], 
        [0.494, 2.537, 0.21], 
        [0.517, 2.582, 0.21], 
        [0.54, 2.628, 0.21], 
        [0.562, 2.673, 0.211], 
        [0.585, 2.718, 0.211], 
        [0.608, 2.763, 0.211], 
        [0.63, 2.808, 0.212], 
        [0.653, 2.853, 0.212], 
        [0.676, 2.898, 0.212], 
        [0.698, 2.943, 0.213], 
        [0.721, 2.988, 0.213], 
        [0.744, 3.033, 0.213]
        ],
        'f': [
        [-0.162, 0.833, 0.2], 
        [-0.128, 0.907, 0.2], 
        [-0.095, 0.98, 0.2], 
        [-0.061, 1.053, 0.2], 
        [-0.028, 1.125, 0.2], 
        [0.006, 1.196, 0.2], 
        [0.039, 1.266, 0.2], 
        [0.072, 1.334, 0.2], 
        [0.106, 1.4, 0.2], 
        [0.139, 1.464, 0.2], 
        [0.173, 1.526, 0.2], 
        [0.206, 1.585, 0.2], 
        [0.239, 1.642, 0.2], 
        [0.273, 1.697, 0.2], 
        [0.306, 1.75, 0.2], 
        [0.34, 1.801, 0.2], 
        [0.373, 1.85, 0.2], 
        [0.406, 1.897, 0.2], 
        [0.44, 1.943, 0.2], 
        [0.473, 1.988, 0.2], 
        [0.507, 2.032, 0.2], 
        [0.54, 2.074, 0.2], 
        [0.574, 2.117, 0.2], 
        [0.607, 2.158, 0.2], 
        [0.64, 2.2, 0.2], 
        [0.674, 2.241, 0.2], 
        [0.707, 2.282, 0.2], 
        [0.741, 2.323, 0.2], 
        [0.774, 2.364, 0.2], 
        [0.807, 2.406, 0.2], 
        [0.841, 2.447, 0.2], 
        [0.874, 2.488, 0.2], 
        [0.908, 2.529, 0.2], 
        [0.941, 2.57, 0.2], 
        [0.975, 2.612, 0.2], 
        [1.008, 2.653, 0.2], 
        [1.041, 2.694, 0.2], 
        [1.075, 2.735, 0.2], 
        [1.108, 2.776, 0.2], 
        [1.142, 2.817, 0.2]
        ]

        }
prox_rca = {'name': 'prox_rca',
            'm': [
                [0.292, 1.01, 0.174],
                [0.292, 1.099, 0.174],
                [0.292, 1.187, 0.174],
                [0.292, 1.276, 0.174],
                [0.292, 1.363, 0.174],
                [0.292, 1.45, 0.174],
                [0.292, 1.536, 0.174],
                [0.292, 1.62, 0.174],
                [0.292, 1.702, 0.174],
                [0.292, 1.783, 0.174],
                [0.292, 1.861, 0.174],
                [0.292, 1.938, 0.174],
                [0.292, 2.012, 0.174],
                [0.292, 2.085, 0.174],
                [0.292, 2.156, 0.174],
                [0.292, 2.225, 0.174],
                [0.292, 2.292, 0.174],
                [0.292, 2.358, 0.174],
                [0.292, 2.422, 0.174],
                [0.292, 2.485, 0.174],
                [0.292, 2.547, 0.174],
                [0.292, 2.607, 0.174],
                [0.292, 2.666, 0.174],
                [0.292, 2.725, 0.174],
                [0.292, 2.782, 0.174],
                [0.292, 2.839, 0.174],
                [0.292, 2.896, 0.174],
                [0.292, 2.952, 0.174],
                [0.292, 3.008, 0.174],
                [0.292, 3.063, 0.174],
                [0.292, 3.119, 0.174],
                [0.292, 3.174, 0.174],
                [0.292, 3.229, 0.174],
                [0.292, 3.285, 0.174],
                [0.292, 3.34, 0.174],
                [0.292, 3.39, 0.174],
                [0.292, 3.45, 0.174],
                [0.292, 3.506, 0.174],
                [0.292, 3.561, 0.174],
                [0.292, 3.616, 0.174],
                [0.292, 3.671, 0.174],
                [0.292, 3.726, 0.174]
            ],
            'f': [
                [0.607, 1.005, 0.17],
                [0.607, 1.089, 0.17],
                [0.607, 1.173, 0.17],
                [0.607, 1.257, 0.17],
                [0.607, 1.341, 0.17],
                [0.607, 1.423, 0.17],
                [0.607, 1.504, 0.17],
                [0.607, 1.583, 0.17],
                [0.607, 1.66, 0.17],
                [0.607, 1.735, 0.17],
                [0.607, 1.808, 0.17],
                [0.607, 1.878, 0.17],
                [0.607, 1.946, 0.17],
                [0.607, 2.011, 0.17],
                [0.607, 2.074, 0.17],
                [0.607, 2.135, 0.17],
                [0.607, 2.194, 0.17],
                [0.607, 2.251, 0.17],
                [0.607, 2.306, 0.17],
                [0.607, 2.36, 0.17],
                [0.607, 2.412, 0.17],
                [0.607, 2.463, 0.17],
                [0.607, 2.514, 0.17],
                [0.607, 2.563, 0.17],
                [0.607, 2.612, 0.17],
                [0.607, 2.661, 0.17],
                [0.607, 2.71, 0.17],
                [0.607, 2.758, 0.17],
                [0.607, 2.806, 0.17],
                [0.607, 2.855, 0.17],
                [0.607, 2.903, 0.17],
                [0.607, 2.951, 0.17],
                [0.607, 2.999, 0.17],
                [0.607, 3.048, 0.17],
                [0.607, 3.096, 0.17],
                [0.607, 3.144, 0.17],
                [0.607, 3.192, 0.17],
                [0.607, 3.24, 0.17],
                [0.607, 3.289, 0.17],
                [0.607, 3.337, 0.17]
            ]
            }

sites = [
     'lmca',
     'lad',
     'circ',
    'prox_rca'
]
